//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4c940fb8-4f6a-4d43-a105-801807a35fa4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8e37c3e9-fc86-45a0-aacb-e6c31fe3b94b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""d8f23fa4-f4ea-49c1-ad7d-d3753d0da6b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6cfad847-f341-4817-94b5-02fe708639db"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83c517e4-cda7-4e0a-bdc1-943e4d5308c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e180d20c-db21-4efe-aafe-5d689f74876f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b4d4757-70c8-4157-9a8f-fa18f67a8af7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07c95540-b665-4f5b-8247-76930f5d0bdb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e98f02b-fbf1-47db-afd8-1febe5318c84"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Surveillance"",
            ""id"": ""2292c5ec-16d4-42f7-bae8-4e32cc38e2dd"",
            ""actions"": [
                {
                    ""name"": ""NextCamera"",
                    ""type"": ""Button"",
                    ""id"": ""9744ae90-e2cf-4eb7-9c50-c984a1c3e674"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LastCamera"",
                    ""type"": ""Button"",
                    ""id"": ""deb150f4-8178-452a-9738-0c87924bc971"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""178caa70-5196-48da-8789-7d920f9a966d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c3136de-8ec7-41bb-b4e8-95f17e307615"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LastCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""5839f2ce-048d-41f3-a001-5648ed901cec"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""6a9d9f8f-d178-4d85-897b-3b4f44d5c485"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleView"",
                    ""type"": ""Button"",
                    ""id"": ""c2828dab-8108-4ca8-b325-d511d3a7cf73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlFollowTarget"",
                    ""type"": ""Button"",
                    ""id"": ""b922431e-f31f-4994-a6b8-e5106cb89f56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5e86509-56e6-46b3-9c76-f6f3a11341e7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ed8be29-a6ca-4e0c-a552-3b6f337566f7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9797a578-a319-4735-8247-a6ad366522c1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlFollowTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        // Surveillance
        m_Surveillance = asset.FindActionMap("Surveillance", throwIfNotFound: true);
        m_Surveillance_NextCamera = m_Surveillance.FindAction("NextCamera", throwIfNotFound: true);
        m_Surveillance_LastCamera = m_Surveillance.FindAction("LastCamera", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MousePosition = m_Camera.FindAction("MousePosition", throwIfNotFound: true);
        m_Camera_ToggleView = m_Camera.FindAction("ToggleView", throwIfNotFound: true);
        m_Camera_ControlFollowTarget = m_Camera.FindAction("ControlFollowTarget", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Run;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Surveillance
    private readonly InputActionMap m_Surveillance;
    private ISurveillanceActions m_SurveillanceActionsCallbackInterface;
    private readonly InputAction m_Surveillance_NextCamera;
    private readonly InputAction m_Surveillance_LastCamera;
    public struct SurveillanceActions
    {
        private @PlayerControls m_Wrapper;
        public SurveillanceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextCamera => m_Wrapper.m_Surveillance_NextCamera;
        public InputAction @LastCamera => m_Wrapper.m_Surveillance_LastCamera;
        public InputActionMap Get() { return m_Wrapper.m_Surveillance; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SurveillanceActions set) { return set.Get(); }
        public void SetCallbacks(ISurveillanceActions instance)
        {
            if (m_Wrapper.m_SurveillanceActionsCallbackInterface != null)
            {
                @NextCamera.started -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnNextCamera;
                @NextCamera.performed -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnNextCamera;
                @NextCamera.canceled -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnNextCamera;
                @LastCamera.started -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnLastCamera;
                @LastCamera.performed -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnLastCamera;
                @LastCamera.canceled -= m_Wrapper.m_SurveillanceActionsCallbackInterface.OnLastCamera;
            }
            m_Wrapper.m_SurveillanceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextCamera.started += instance.OnNextCamera;
                @NextCamera.performed += instance.OnNextCamera;
                @NextCamera.canceled += instance.OnNextCamera;
                @LastCamera.started += instance.OnLastCamera;
                @LastCamera.performed += instance.OnLastCamera;
                @LastCamera.canceled += instance.OnLastCamera;
            }
        }
    }
    public SurveillanceActions @Surveillance => new SurveillanceActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_MousePosition;
    private readonly InputAction m_Camera_ToggleView;
    private readonly InputAction m_Camera_ControlFollowTarget;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Camera_MousePosition;
        public InputAction @ToggleView => m_Wrapper.m_Camera_ToggleView;
        public InputAction @ControlFollowTarget => m_Wrapper.m_Camera_ControlFollowTarget;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @ToggleView.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnToggleView;
                @ToggleView.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnToggleView;
                @ToggleView.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnToggleView;
                @ControlFollowTarget.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnControlFollowTarget;
                @ControlFollowTarget.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnControlFollowTarget;
                @ControlFollowTarget.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnControlFollowTarget;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @ToggleView.started += instance.OnToggleView;
                @ToggleView.performed += instance.OnToggleView;
                @ToggleView.canceled += instance.OnToggleView;
                @ControlFollowTarget.started += instance.OnControlFollowTarget;
                @ControlFollowTarget.performed += instance.OnControlFollowTarget;
                @ControlFollowTarget.canceled += instance.OnControlFollowTarget;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface ISurveillanceActions
    {
        void OnNextCamera(InputAction.CallbackContext context);
        void OnLastCamera(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnToggleView(InputAction.CallbackContext context);
        void OnControlFollowTarget(InputAction.CallbackContext context);
    }
}
